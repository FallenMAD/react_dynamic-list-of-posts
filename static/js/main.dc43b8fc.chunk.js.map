{"version":3,"sources":["components/Loader/Loader.tsx","utils/fetchClient.ts","api/services.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/PostsList.tsx","App.tsx","index.tsx"],"names":["Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getPosts","userId","getComments","postId","deleteComment","commentId","NewCommentForm","createNewComment","buttonLoad","error","useState","name","email","setData","dataError","setDataError","submit","setSubmit","isValidData","trim","length","onSubmit","e","preventDefault","prev","htmlFor","type","id","placeholder","classNames","value","onChange","target","onClick","PostDetails","selectedPost","comments","loading","setComments","createComment","setCreateComment","setButtonLoad","commentData","a","newComment","useEffect","removeComment","filter","comment","Error","title","map","href","UserSelector","users","selectedUser","handleSelectUser","list","setList","toggleList","role","user","handleListClick","PostsList","posts","handleSelectPost","open","setOpen","handleOpenPost","post","App","setUsers","setSelectedUser","setPosts","loadingPost","setLoadingPost","setSelectedPost","errorPost","setErrorPost","loadComment","setLoadComment","loadSideBar","setLoadSideBar","errorComment","setErrorComment","loadUsers","dataUsers","loadPosts","dataPosts","loadComments","dataComments","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc43b8fc.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { CommentData, Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  createNewComment: (value: CommentData) => void;\n  buttonLoad: boolean;\n  error: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  createNewComment,\n  buttonLoad,\n  error,\n}) => {\n  const [data, setData] = useState({ body: '', name: '', email: '' });\n  const [dataError, setDataError] = useState({\n    body: false, name: false, email: false,\n  });\n  const [submit, setSubmit] = useState(false);\n\n  const isValidData = data.body.trim().length !== 0\n    && data.email.trim().length !== 0\n    && data.name.trim().length !== 0;\n\n  const addComment = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!isValidData) {\n      // setDataError({ body: true, name: true, email: true });\n      setDataError({\n        body: data.body.trim().length === 0,\n        name: data.name.trim().length === 0,\n        email: data.email.trim().length === 0,\n      });\n      setSubmit(true);\n\n      return;\n    }\n\n    createNewComment(data);\n    setData(prev => ({ ...prev, body: '' }));\n    setDataError(prev => ({ ...prev, body: false }));\n    setSubmit(true);\n  };\n\n  const clearData = () => {\n    setData({ body: '', name: '', email: '' });\n    setDataError({ body: false, name: false, email: false });\n    setSubmit(false);\n  };\n\n  return (\n    <>\n      {error ? (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          Something went wrong\n        </div>\n      ) : (\n        <form data-cy=\"NewCommentForm\" onSubmit={addComment}>\n          <div className=\"field\" data-cy=\"NameField\">\n            <label className=\"label\" htmlFor=\"comment-author-name\">\n              Author Name\n            </label>\n\n            <div className=\"control has-icons-left has-icons-right\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                id=\"comment-author-name\"\n                placeholder=\"Name Surname\"\n                className={classNames('input', {\n                  'is-danger': dataError.name && !data.name && submit,\n                })}\n                value={data.name}\n                onChange={(e) => setData(prev => ({\n                  ...prev,\n                  name: e.target.value,\n                }))}\n              />\n\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-user\" />\n              </span>\n\n              {(dataError.name && !data.name && submit) && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              )}\n\n            </div>\n            {(dataError.name && !data.name && submit) && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Name is required\n              </p>\n            )}\n\n          </div>\n\n          <div className=\"field\" data-cy=\"EmailField\">\n            <label className=\"label\" htmlFor=\"comment-author-email\">\n              Author Email\n            </label>\n\n            <div className=\"control has-icons-left has-icons-right\">\n              <input\n                type=\"text\"\n                name=\"email\"\n                id=\"comment-author-email\"\n                placeholder=\"email@test.com\"\n                className={classNames('input', {\n                  'is-danger': dataError.email && !data.email && submit,\n                })}\n                value={data.email}\n                onChange={(e) => setData(prev => ({\n                  ...prev,\n                  email: e.target.value,\n                }))}\n              />\n\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-envelope\" />\n              </span>\n\n              {(dataError.email && !data.email && submit) && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              )}\n            </div>\n\n            {(dataError.email && !data.email && submit) && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Email is required\n              </p>\n            )}\n          </div>\n\n          <div className=\"field\" data-cy=\"BodyField\">\n            <label className=\"label\" htmlFor=\"comment-body\">\n              Comment Text\n            </label>\n\n            <div className=\"control\">\n              <textarea\n                id=\"comment-body\"\n                name=\"body\"\n                placeholder=\"Type comment here\"\n                className={classNames('textarea', {\n                  'is-danger': dataError.body && !data.body && submit,\n                })}\n                value={data.body}\n                onChange={(e) => setData(prev => ({\n                  ...prev,\n                  body: e.target.value,\n                }))}\n              />\n            </div>\n\n            {(dataError.body && !data.body && submit) && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Enter some text\n              </p>\n            )}\n\n          </div>\n\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <button\n                type=\"submit\"\n                className={classNames('button', 'is-link', {\n                  'is-loading': buttonLoad,\n                })}\n              >\n                Add\n              </button>\n            </div>\n\n            <div className=\"control\">\n              {/* eslint-disable-next-line react/button-has-type */}\n              <button\n                type=\"reset\"\n                className=\"button is-link is-light\"\n                onClick={clearData}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        </form>\n      )}\n    </>\n\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { deleteComment, postComment } from '../api/services';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | null;\n  comments: Comment[];\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  loading: boolean;\n  error: boolean;\n  // setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  loading,\n  error,\n  setComments,\n}) => {\n  const [createComment, setCreateComment] = useState(false);\n  const [buttonLoad, setButtonLoad] = useState(false);\n  // const [errorComment, setErrorComment] = useState(false);\n\n  const createNewComment = async (commentData: CommentData) => {\n    const data: Comment = {\n      postId: selectedPost?.id || 0,\n      ...commentData,\n    };\n\n    try {\n      setButtonLoad(true);\n      // setErrorComment(false);\n      const newComment: Comment = await postComment(data);\n\n      setComments(prev => [\n        ...prev,\n        newComment,\n      ]);\n    } catch {\n      // setErrorComment(true);\n    } finally {\n      setButtonLoad(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPost?.id) {\n      setCreateComment(true);\n    } else {\n      setCreateComment(false);\n    }\n  }, [selectedPost]);\n\n  const handleClick = () => {\n    setCreateComment(prev => !prev);\n  };\n\n  const removeComment = async (commentId: number) => {\n    try {\n      await deleteComment(commentId);\n\n      setComments(comments.filter(comment => comment.id !== commentId));\n    } catch {\n      throw new Error('Error');\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && (\n            <Loader />\n          )}\n\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(selectedPost && !loading && !error) && (\n            <>\n              {comments?.length > 0 ? (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {comments.map(comment => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => removeComment(comment.id || 0)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              ) : (\n                <>\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                </>\n              )}\n\n              {createComment && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={handleClick}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n\n        </div>\n\n        {!createComment && (\n          <NewCommentForm\n            createNewComment={createNewComment}\n            buttonLoad={buttonLoad}\n            error={error}\n          />\n        )}\n\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  handleSelectUser: (value: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  handleSelectUser,\n}) => {\n  const [list, setList] = useState(false);\n\n  const toggleList = () => {\n    setList(prev => !prev);\n  };\n\n  const handleListClick = (user: User) => {\n    handleSelectUser(user);\n    toggleList();\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': list })}\n    >\n\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleList}\n        >\n          {selectedUser ? selectedUser.name : (<span>Choose a user</span>)}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              key={user.id}\n              className={classNames('dropdown-item',\n                {\n                  'is-active': selectedUser?.id === user.id,\n                })}\n              onClick={() => handleListClick(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  handleSelectPost: (value: Post) => void;\n  // selectId: Post | null\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  handleSelectPost,\n  // selectId,\n}) => {\n  const [open, setOpen] = useState<number | null>(null);\n  const handleOpenPost = (post: Post) => {\n    if (open === post.id) {\n      setOpen(null);\n    } else {\n      setOpen(post.id);\n    }\n\n    handleSelectPost(post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n        {posts.map(post => (\n          <tbody key={post.id}>\n            <tr data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n              {open === post.id ? (\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => handleOpenPost(post)}\n                  >\n                    Close\n                  </button>\n                </td>\n              ) : (\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => handleOpenPost(post)}\n                  >\n                    Open\n                  </button>\n                </td>\n              )}\n            </tr>\n          </tbody>\n        ))}\n\n      </table>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport {\n  getComments,\n  getPosts,\n  getUsers,\n} from './api/services';\nimport { Post } from './types/Post';\nimport { PostsList } from './components/PostsList';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loadingPost, setLoadingPost] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [errorPost, setErrorPost] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loadComment, setLoadComment] = useState(false);\n  const [loadSideBar, setLoadSideBar] = useState(false);\n  const [errorComment, setErrorComment] = useState(false);\n\n  const loadUsers = async () => {\n    try {\n      const dataUsers = await getUsers();\n\n      setUsers(dataUsers);\n    } catch {\n      throw new Error('Error');\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadPosts = async (userId: number) => {\n    setLoadingPost(true);\n    setErrorPost(false);\n\n    try {\n      const dataPosts = await getPosts(userId);\n\n      setPosts(dataPosts);\n    } catch {\n      setErrorPost(true);\n    } finally {\n      setLoadingPost(false);\n    }\n  };\n\n  const handleSelectUser = (user: User) => {\n    setLoadSideBar(false);\n    setSelectedUser(user);\n    loadPosts(user.id);\n  };\n\n  const loadComments = async (postId: number) => {\n    setLoadComment(true);\n    setErrorComment(false);\n    try {\n      const dataComments = await getComments(postId);\n\n      setComments(dataComments);\n    } catch {\n      setErrorComment(true);\n    } finally {\n      setLoadComment(false);\n    }\n  };\n\n  const handleSelectPost = (post: Post) => {\n    setLoadSideBar(true);\n    setSelectedPost(post);\n    loadComments(post.id);\n  };\n\n  // useEffect(() => {\n  //   if (selectedPost?.id) {\n  //     setLoadSideBar(true);\n  //   } else {\n  //     setLoadSideBar(false);\n  //   }\n  // }, [selectedPost?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  handleSelectUser={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loadingPost && (\n                  <Loader />\n                )}\n\n                {errorPost && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(selectedUser && !loadingPost && !errorPost) && (\n                  <>\n                    {posts.length > 0 ? (\n                      <PostsList\n                        posts={posts}\n                        handleSelectPost={handleSelectPost}\n                        // selectId={selectedPost}\n                      />\n                    ) : (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {loadSideBar && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  loading={loadComment}\n                  error={errorComment}\n                  setComments={setComments}\n                />\n              </div>\n            </div>\n          )}\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}